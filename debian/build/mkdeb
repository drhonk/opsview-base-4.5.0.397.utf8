#!/bin/sh
#
# Takes version number of packages to build, and directory containing unpacked
# upstream sources with debian/ dir from subversion.
#
# AUTHORS:
#	Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

# Args (we'll check these in a mo)
version="$1"
short_version=`echo $version | sed -e 's/-.*//'`
src_dir="$2"

# Variables
package="opsview-base"
this_dir=$PWD
build_timestamp=`date +build-%Y%m%d-%H%M`
log_file="$this_dir/build/${build_timestamp}.log"
changelog_msg="New upstream release of ${version%*-*}"
msg_subject="build: ${package} - ${build_timestamp}"

usage() {
  echo -e "Usage:\t`basename $0` <version> <sourcedir>" >&2
  exit 1
}

log() {
  echo "$@" >> $log_file
}

build_fail() {
  echo "$1" >&2
  exit 1
}

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  usage
fi

if [ "$1" = "" ]; then
  echo "Must specify package version number!"
  exit 1
fi

if ! [ -d "$2" ]; then
  echo "Must specify valid source directory!" >&2
  exit 1
fi

# Need lsb_release
if [ "`which lsb_release`" = "" ]; then
  echo "lsb_release binary not found" >&2
  exit 1
fi

# Debian release from lsb_release
debian_release=`lsb_release -cs`

# Build commands run from source dir
cd ${src_dir} || (echo "Could not cd to ${src_dir}"; exit 1)

# Let's start the build
echo "Package build starting"

# Update changelog
echo "Updating changelog" >> ${log_file}
dch --newversion ${version}${debian_release}1 "${changelog_msg}" >> ${log_file} 2>&1 || \
  build_fail "Couldn't update changelog, see log file in ${log_file}"

# Update package version dependencies
sed -e "s/PKG_VERSION/${short_version}/g" debian/control > debian/control.new
mv debian/control.new debian/control

# Build the .deb
# Output to stdout so buildbot doesnt time out with no output
{
	VERSION=${version} dpkg-buildpackage -I.svn -i.svn -I.git -i.git -Iwindows_agent_pkg -iwindows_agent_pkg -rfakeroot -uc -us 2>&1
} | tee ${log_file}

tail -5 ${log_file} | egrep -i "error|failure|abort" 1>/dev/null

# Success?
if [ $? -ne 0 ]; then
  echo "Packages built successfully"
else
  build_fail "Package building failed, see log file in ${log_file}"
fi
