diff -Nur nagios-3.2.3.original/base/checks.c nagios-3.2.3/base/checks.c
--- nagios-3.2.3.original/base/checks.c	2011-01-10 11:16:12.000000000 +0000
+++ nagios-3.2.3/base/checks.c	2011-01-11 11:45:48.000000000 +0000
@@ -1431,8 +1431,11 @@
 			/* update last state change times */
 			if(state_change==TRUE || hard_state_change==TRUE)
 				temp_service->last_state_change=temp_service->last_check;
-			if(hard_state_change==TRUE)
+			if(hard_state_change==TRUE) {
 				temp_service->last_hard_state_change=temp_service->last_check;
+			    temp_service->state_type=HARD_STATE;
+			    temp_service->last_hard_state=temp_service->current_state;
+            }
 
 			/* put service into a hard state without attempting check retries and don't send out notifications about it */
 			temp_service->host_problem_at_last_check=TRUE;
diff -Nur nagios-3.2.3.original/t-tap/test_checks.c nagios-3.2.3/t-tap/test_checks.c
--- nagios-3.2.3.original/t-tap/test_checks.c	1970-01-01 00:00:00.000000000 +0000
+++ nagios-3.2.3/t-tap/test_checks.c	2011-01-11 11:45:37.000000000 +0000
@@ -0,0 +1,302 @@
+/*****************************************************************************
+* 
+* This program is free software: you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation, either version 3 of the License, or
+* (at your option) any later version.
+* 
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+* 
+* You should have received a copy of the GNU General Public License
+* along with this program.  If not, see <http://www.gnu.org/licenses/>.
+* 
+* 
+*****************************************************************************/
+
+#define NSCORE 1
+#include "config.h"
+#include "common.h"
+#include "downtime.h"
+#include "comments.h"
+#include "statusdata.h"
+#include "nagios.h"
+#include "broker.h"
+#include "sretention.h"
+#include "tap.h"
+
+char *config_file="etc/nagios.cfg";
+int      test_scheduling;
+
+time_t   program_start;
+time_t   event_start;
+time_t   last_command_check;
+
+int      sigshutdown=FALSE;
+int      sigrestart=FALSE;
+
+double   sleep_time;
+int      interval_length = 60;
+int      service_inter_check_delay_method;
+int      host_inter_check_delay_method;
+int      service_interleave_factor_method;
+int      max_host_check_spread;
+int      max_service_check_spread;
+
+int      command_check_interval;
+int      check_reaper_interval;
+int      service_freshness_check_interval;
+int      host_freshness_check_interval;
+int      auto_rescheduling_interval;
+int      host_freshness_check_interval;
+int      auto_rescheduling_interval;
+int      auto_rescheduling_window;
+
+int      check_external_commands;
+int      check_orphaned_services;
+int      check_orphaned_hosts;
+int      check_service_freshness;
+int      check_host_freshness;
+int      auto_reschedule_checks;
+
+int      retain_state_information;
+int      retention_update_interval;
+
+int      max_parallel_service_checks;
+int      currently_running_service_checks;
+
+int      aggregate_status_updates;
+int      status_update_interval;
+
+int      log_rotation_method;
+
+int      service_check_timeout;
+
+int      execute_service_checks=1;
+int      execute_host_checks;
+
+int      child_processes_fork_twice;
+
+int      time_change_threshold;
+int             currently_running_host_checks=0;
+int             translate_passive_host_checks=DEFAULT_TRANSLATE_PASSIVE_HOST_CHECKS;
+int             passive_host_checks_are_soft=DEFAULT_PASSIVE_HOST_CHECKS_SOFT;
+int             host_check_timeout=DEFAULT_HOST_CHECK_TIMEOUT;
+int             additional_freshness_latency=DEFAULT_ADDITIONAL_FRESHNESS_LATENCY;
+unsigned long   cached_host_check_horizon=DEFAULT_CACHED_HOST_CHECK_HORIZON;
+int             log_passive_checks=DEFAULT_LOG_PASSIVE_CHECKS;
+int             use_aggressive_host_checking=DEFAULT_AGGRESSIVE_HOST_CHECKING;
+int             soft_state_dependencies=FALSE;
+int             enable_predictive_host_dependency_checks=DEFAULT_ENABLE_PREDICTIVE_HOST_DEPENDENCY_CHECKS;
+int             accept_passive_host_checks=TRUE;
+int             free_child_process_memory=-1;
+unsigned long   max_debug_file_size=DEFAULT_MAX_DEBUG_FILE_SIZE;
+unsigned long   cached_service_check_horizon=DEFAULT_CACHED_SERVICE_CHECK_HORIZON;
+int             max_check_reaper_time=DEFAULT_MAX_REAPER_TIME;
+int accept_passive_service_checks;
+int             enable_predictive_service_dependency_checks=DEFAULT_ENABLE_PREDICTIVE_SERVICE_DEPENDENCY_CHECKS;
+int obsess_over_services;
+
+char            *check_result_path=NULL;
+check_result    check_result_info;
+unsigned long   next_event_id=0L;
+unsigned long   next_problem_id=0L;
+
+char *temp_path=NULL;
+
+timed_event *event_list_low=NULL;
+timed_event *event_list_low_tail=NULL;
+timed_event *event_list_high=NULL;
+timed_event *event_list_high_tail=NULL;
+
+host     *host_list;
+service  *service_list;
+
+int check_pending_flex_service_downtime(service *svc){}
+int update_service_performance_data(service *svc){}
+int obsessive_compulsive_service_check_processor(service *svc){}
+int host_notification(host *hst, int type, char *not_author, char *not_data, int options){}
+void check_for_service_flapping(service *svc, int update, int allow_flapstart_notification){}
+int service_notification(service *svc, int type, char *not_author, char *not_data, int options){}
+check_result *read_check_result(void){}
+host * find_host(char *name){}
+service * find_service(char *host_name,char *svc_desc){}
+void service_check_sighandler(int sig){}
+int process_passive_service_check(time_t check_time, char *host_name, char *svc_description, int return_code, char *output){}
+void process_passive_checks(void){}
+int dbuf_init(dbuf *db, int chunk_size){}
+int close_command_file(void){}
+void reset_sighandler(void){}
+char *escape_newlines(char *rawbuf){}
+int dbuf_strcat(dbuf *db, char *buf){}
+int move_check_result_to_queue(char *checkresult_file){}
+int set_all_macro_environment_vars(int set){}
+void free_memory(void){}
+void reschedule_event(timed_event *event, timed_event **event_list, timed_event **event_list_tail){}
+int grab_service_macros(service *svc){}
+void remove_event(timed_event *event, timed_event **event_list, timed_event **event_list_tail){}
+int broker_service_check(int type, int flags, int attr, service *svc, int check_type, struct timeval start_time, struct timeval end_time, char *cmd, double latency, double exectime, int timeout, int early_timeout, int retcode, char *cmdline, struct timeval *timestamp){}
+int my_system(char *cmd,int timeout,int *early_timeout,double *exectime,char **output,int max_output_length){}
+int delete_check_result_file(char *fname){}
+int process_macros(char *input_buffer, char **output_buffer, int options){}
+int grab_host_macros(host *hst){}
+int dbuf_free(dbuf *db){}
+int clear_volatile_macros(void){}
+servicedependency *get_first_servicedependency_by_dependent_service(char *host_name, char *svc_description, void **ptr){}
+servicedependency *get_next_servicedependency_by_dependent_service(char *host_name, char *svc_description, void **ptr){}
+hostdependency *get_next_hostdependency_by_dependent_host(char *host_name, void **ptr){}
+hostdependency *get_first_hostdependency_by_dependent_host(char *host_name, void **ptr){
+    return NULL;
+}
+int parse_check_output(char *buf, char **short_output, char **long_output, char **perf_data, int escape_newlines_please, int newlines_are_escaped){
+    *short_output=strdup("Short output");
+    *long_output=strdup("");
+    *perf_data=strdup("");
+}
+int handle_host_state(host *hst){}
+int delete_service_acknowledgement_comments(service *svc){}
+int broker_host_check(int type, int flags, int attr, host *hst, int check_type, int state, int state_type, struct timeval start_time, struct timeval end_time, char *cmd, double latency, double exectime, int timeout, int early_timeout, int retcode, char *cmdline, char *output, char *long_output, char *perfdata, struct timeval *timestamp){}
+int free_check_result(check_result *info){}
+void check_for_host_flapping(host *hst, int update, int actual_check, int allow_flapstart_notification){}
+int log_service_event_flag=0;
+int log_service_event(service *svc){
+    //printf(">> Log service event called: host:%s service:%s state:%d\n", svc->host_name, svc->description, svc->current_state);
+    log_service_event_flag++;
+}
+int handle_service_event(service *svc){}
+void host_check_sighandler(int sig){}
+int update_check_stats(int check_type, time_t check_time){}
+int compare_strings(char *val1a, char *val2a){}
+int process_check_result_queue(char *dirname){}
+int get_raw_command_line(command *cmd_ptr, char *cmd, char **full_command, int macro_options){}
+int log_host_event(host *hst){}
+int free_objectlist(objectlist **temp_list){}
+int add_object_to_objectlist(objectlist **list, void *object_ptr){}
+int check_for_expired_comment(unsigned long temp_long) {}
+void broker_timed_event(int int1, int int2, int int3, timed_event *timed_event1, struct timeval *timeval1) {}
+int check_for_expired_downtime(void) {}
+int check_for_nagios_updates(int int1, int int2) {}
+time_t get_next_service_notification_time(service *temp_service, time_t time_t1) {}
+int save_state_information(int int1) {}
+void get_time_breakdown(unsigned long long1, int *int1, int *int2, int *int3, int *int4) {}
+int check_for_external_commands(void) {}
+int check_time_against_period(time_t time_t1, timeperiod *timeperiod) {}
+time_t get_next_log_rotation_time(void) {}
+int handle_scheduled_downtime_by_id(unsigned long long1) {}
+int rotate_log_file(time_t time_t1) {}
+time_t get_next_host_notification_time(host *temp_host,time_t time_t1) {}
+void get_next_valid_time(time_t time_t1, time_t *time_t2,timeperiod *temp_timeperiod) {}
+void logit(int int1,int int2,const char *fmt, ...) {}
+
+int c=0;
+int update_program_status(int aggregated_dump){ 
+	c++;
+	/* printf ("# In the update_program_status hook: %d\n", c); */
+	
+	/* Set this to break out of event_execution_loop */
+	if (c>10) {
+		sigshutdown=TRUE;
+		c=0;
+	}
+} 
+int update_service_status(service *svc,int aggregated_dump){}
+int update_all_status_data(void){}
+int log_debug_info(int level, int verbosity, const char *fmt, ...){
+	va_list ap;
+	va_start(ap, fmt);
+	//vprintf( fmt, ap );
+	va_end(ap);
+}
+int update_host_status(host *hst,int aggregated_dump){}
+
+/* Test variables */
+service *svc1=NULL, *svc2=NULL, *svc3=NULL;
+host *host1=NULL;
+check_result *queued_check_result=NULL;
+
+void setup_objects(time_t time) {
+    host1=(host *)malloc(sizeof(host));
+    host1->name=strdup("Host1");
+    host1->address=strdup("127.0.0.1");
+    host1->retry_interval=1;
+    host1->check_interval=5;
+    host1->check_options=0;
+    host1->next_check=time;
+    host1->state_type=SOFT_STATE;
+    host1->current_state=STATE_OK;
+
+    svc1=(service *)malloc(sizeof(service));
+    svc1->host_name=strdup("Host1");
+    svc1->description=strdup("Normal service");
+    svc1->check_options=0;
+    svc1->next_check=time;
+    svc1->state_type=HARD_STATE;
+    svc1->current_state=STATE_OK;
+    svc1->current_attempt=1;
+    svc1->max_attempts=5;
+    svc1->retry_interval=1;
+    svc1->check_interval=5;
+    svc1->latency=0.5555;
+    svc1->last_check=(time_t)1234560000;
+    svc1->host_ptr=host1;
+    svc1->host_problem_at_last_check=FALSE;
+
+}
+
+void setup_check_result() {
+    struct timeval start_time,finish_time;
+    start_time.tv_sec=1234567890L;
+    start_time.tv_usec=0L;
+    finish_time.tv_sec=1234567891L;
+    finish_time.tv_usec=0L;
+
+    queued_check_result=(check_result *)malloc(sizeof(check_result));
+    queued_check_result->check_type=SERVICE_CHECK_ACTIVE;
+    queued_check_result->check_options=0;
+    queued_check_result->scheduled_check=TRUE;
+    queued_check_result->reschedule_check=TRUE;
+    queued_check_result->exited_ok=TRUE;
+    queued_check_result->return_code=0;
+    queued_check_result->output=strdup("Fake result");
+    queued_check_result->latency=0.6969;
+    queued_check_result->start_time=start_time;
+    queued_check_result->finish_time=finish_time;
+}
+
+
+int
+main (int argc, char **argv)
+{
+	time_t now=0L;
+
+	plan_tests(7);
+
+	time(&now);
+
+    /* Test case:
+         service that transitions from OK to CRITICAL (where its host is set to DOWN) will get set to a hard state 
+         even though check attempts = 1 of 5
+    */
+    setup_objects((time_t) 1234567800L);
+    host1->current_state=1;
+    setup_check_result();
+    queued_check_result->return_code=2;
+    queued_check_result->output=strdup("CRITICAL failure");
+    log_service_event_flag=0;
+
+    handle_async_service_check_result(svc1, queued_check_result);
+
+    ok( log_service_event_flag==1, "log_service_event() was called");
+    ok( svc1->last_hard_state_change == (time_t)1234567890, "Got last_hard_state_change time=%lu", svc1->last_hard_state_change);
+    ok( svc1->last_state_change == svc1->last_hard_state_change, "Got same last_state_change" );
+    ok( svc1->last_hard_state == 2, "Should save the last hard state as critical for next time");
+    ok( svc1->host_problem_at_last_check==TRUE, "Got host_problem_at_last_check set to TRUE due to host failure - this needs to be saved otherwise extra alerts raised in subsequent runs");
+    ok( svc1->state_type == HARD_STATE, "This should be a HARD state since the host is in a failure state");
+    ok( svc1->current_attempt==1, "Previous status was OK, so this failure should show current_attempt=1");
+
+
+	return exit_status ();
+}
+
