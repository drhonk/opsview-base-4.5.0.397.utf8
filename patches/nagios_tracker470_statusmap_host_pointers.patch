diff -ur nagios-4.0.0-orig/cgi/statusmap.c nagios-4.0.0/cgi/statusmap.c
--- nagios-4.0.0-orig/cgi/statusmap.c	2013-09-20 14:01:20.000000000 -0500
+++ nagios-4.0.0/cgi/statusmap.c	2013-09-26 18:01:06.000000000 -0500
@@ -289,6 +289,30 @@
 	/* get authentication information */
 	get_authentication_information(&current_authdata);
 
+/* Patch from http://tracker.nagios.org/view.php?id=470 */
+{
+	host *temp_host = NULL;
+	host *temp_host2 = NULL;
+	hostsmember *temp_hostsmember = NULL;
+
+	for(temp_host = host_list; temp_host != NULL; temp_host = temp_host->next) {
+		/* check all parent parent host */
+		for(temp_hostsmember = temp_host->parent_hosts; temp_hostsmember != NULL; temp_hostsmember = temp_hostsmember->next) {
+
+			if((temp_host2 = find_host(temp_hostsmember->host_name)) == NULL) {
+				continue; //logit(NSLOG_VERIFICATION_ERROR, TRUE, "Error: '%s' is not a valid parent for host '%s'!", temp_hostsmember->host_name, temp_host->name);
+			}
+
+			/* save the parent host pointer for later */
+                        temp_hostsmember->host_ptr = temp_host2;
+
+			/* add a reverse (child) link to make searches faster later on */
+			if (add_child_link_to_host(temp_host2, temp_host) == NULL){
+				}//printf("add_child_link_to_host returned NULL!!<br/>\n");
+		}
+	}
+}
+
 	/* display the network map... */
 	display_map();
 
diff -ur nagios-4.0.0-orig/common/objects.c nagios-4.0.0/common/objects.c
--- nagios-4.0.0-orig/common/objects.c	2013-09-20 14:01:20.000000000 -0500
+++ nagios-4.0.0/common/objects.c	2013-09-26 18:04:50.000000000 -0500
@@ -2146,7 +2146,18 @@
 /* returns a count of the immediate children for a given host */
 /* NOTE: This function is only used by the CGIS */
 int number_of_immediate_child_hosts(host *hst) {
-	return hst == NULL ? 0 : hostsmember_elements(hst->child_hosts);
+	int children = 0;
+	host *temp_host = NULL;
+
+	if (hst == NULL) {
+		for(temp_host = host_list; temp_host != NULL; temp_host = temp_host->next) {
+       			if(is_host_immediate_child_of_host(hst, temp_host) == TRUE)
+	       			children++;
+       		}
+		return children;
+	} else {
+		return hostsmember_elements(hst->child_hosts);
+	}
 	}
 
 
